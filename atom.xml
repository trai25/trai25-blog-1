<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alt.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alt.trai25.me/"/>
  <updated>2018-08-02T17:42:32.788Z</updated>
  <id>https://alt.trai25.me/</id>
  
  <author>
    <name>trai25</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Sketch 中使用 override 应适可而止</title>
    <link href="https://alt.trai25.me/2018/08/03/override-should-be-deprecated-in-sketch/"/>
    <id>https://alt.trai25.me/2018/08/03/override-should-be-deprecated-in-sketch/</id>
    <published>2018-08-02T16:31:10.000Z</published>
    <updated>2018-08-02T17:42:32.788Z</updated>
    
    <content type="html"><![CDATA[<p>近来家里的事挺忙，alt.DS 项目进度比较慢。之前的设计和制作过程中遇到了很多问题，导致反复修改了很长时间，甚至经历了三次彻底重做。</p><p>现在看来其实最主要的原因还是我自己对设计体系这件事有许多误解，今天先来说一说其中一点，也是我目前正在调整的部分 ── Symbol Override 的使用边界。</p><a id="more"></a><p>简单来说，在 Sketch 里用 override 一定要适可而止。如果在这一点上缺乏克制，当设计体系用于实际项目中时就会出现很严重的问题：大量的 组件/控件 都需要经过小心设置才能实现需要的样式和状态，对设计师来说，这必然增加大量不必要的操作，同时也大大增加了失误的可能性。当文件需要输出到其它工具时可能也会遇到问题，比如无法识别 override 的部分内容。</p><p><img src="/uploads/altds-20180803-1.png" alt="altds-20180803"></p><p>我建议的做法是，尽量只把 override 用于文本、icon 等具体内容，而组件的样式类型、背景和边框颜色、交互状态等等都尽可能直接锁死，这些区别都应该做成多个 symbol，而不是企图用一个 all in one的 symbol 通过 override 变化出各种样式和状态。</p><p>all in one 用来练手可以，但用在具体项目中应该谨慎一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来家里的事挺忙，alt.DS 项目进度比较慢。之前的设计和制作过程中遇到了很多问题，导致反复修改了很长时间，甚至经历了三次彻底重做。&lt;/p&gt;
&lt;p&gt;现在看来其实最主要的原因还是我自己对设计体系这件事有许多误解，今天先来说一说其中一点，也是我目前正在调整的部分 ── Symbol Override 的使用边界。&lt;/p&gt;
    
    </summary>
    
      <category term="UIUX" scheme="https://alt.trai25.me/categories/UIUX/"/>
    
    
      <category term="Sketch" scheme="https://alt.trai25.me/tags/Sketch/"/>
    
      <category term="design system" scheme="https://alt.trai25.me/tags/design-system/"/>
    
      <category term="override" scheme="https://alt.trai25.me/tags/override/"/>
    
      <category term="symbol" scheme="https://alt.trai25.me/tags/symbol/"/>
    
      <category term="nested symbol" scheme="https://alt.trai25.me/tags/nested-symbol/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记 | 网站 04 - 导航（2/2）</title>
    <link href="https://alt.trai25.me/2018/04/27/ninghao-website-04-navigation-2/"/>
    <id>https://alt.trai25.me/2018/04/27/ninghao-website-04-navigation-2/</id>
    <published>2018-04-27T09:38:07.000Z</published>
    <updated>2018-08-02T07:39:02.374Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>经过前面章节的学习，我觉得宁皓网上教程的章节分段和命名缺乏逻辑，或者说缺少一些通用性的章节分段和命名原则，我个人认为这对学习是不利的。</p><p>由于我是边学习边记录，目前我笔记的章节依然与宁皓网上的章节设置保持一致。如果我今后有足够耐心的话，也许会重新整理这些笔记。</p></div><a id="more"></a><p>笔记合集：<a href="/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/%E7%BD%91%E7%AB%99/">学习笔记 | 网站</a></p><h2 id="1-导航栏上的菜单"><a class="markdownIt-Anchor" href="#1-导航栏上的菜单"></a> 1 导航栏上的菜单</h2><h3 id="11-导航栏上的菜单代码结构"><a class="markdownIt-Anchor" href="#11-导航栏上的菜单代码结构"></a> 1.1 导航栏上的菜单：代码结构</h3><p>上一章里已经创建了一个包含 logo 的导航栏，现在需要在 logo 后面加入四个链接的导航菜单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- logo - 开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- logo - 结束 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 导航菜单 - 开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span>车型<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    <span class="comment">&lt;!-- 添加 `active` 类，表示该链接处于激活状态 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>故事<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>体验<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>经销商<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导航菜单 - 结束 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-导航栏上的菜单样式"><a class="markdownIt-Anchor" href="#12-导航栏上的菜单样式"></a> 1.2 导航栏上的菜单：样式</h3><h3 id="13-菜单样式"><a class="markdownIt-Anchor" href="#13-菜单样式"></a> 1.3 菜单样式</h3><h3 id="14-导航栏上的标志"><a class="markdownIt-Anchor" href="#14-导航栏上的标志"></a> 1.4 导航栏上的标志</h3><h2 id="2-浏览器"><a class="markdownIt-Anchor" href="#2-浏览器"></a> 2 浏览器</h2><h3 id="21-直接在浏览器上编辑保存-sass-样式"><a class="markdownIt-Anchor" href="#21-直接在浏览器上编辑保存-sass-样式"></a> 2.1 直接在浏览器上编辑保存 Sass 样式</h3><h2 id="3-小图标"><a class="markdownIt-Anchor" href="#3-小图标"></a> 3 小图标</h2><h3 id="31-字体小图标"><a class="markdownIt-Anchor" href="#31-字体小图标"></a> 3.1 字体小图标</h3><h3 id="32-material-design-icons"><a class="markdownIt-Anchor" href="#32-material-design-icons"></a> 3.2 Material Design Icons</h3><h2 id="4-导航栏上的搜索"><a class="markdownIt-Anchor" href="#4-导航栏上的搜索"></a> 4 导航栏上的搜索</h2><h3 id="41-导航栏上的搜索"><a class="markdownIt-Anchor" href="#41-导航栏上的搜索"></a> 4.1 导航栏上的搜索</h3><h3 id="42-搜索框思路"><a class="markdownIt-Anchor" href="#42-搜索框思路"></a> 4.2 搜索框：思路</h3><h3 id="43-搜索框表单元素"><a class="markdownIt-Anchor" href="#43-搜索框表单元素"></a> 4.3 搜索框：表单元素</h3><h3 id="44-搜索框交互"><a class="markdownIt-Anchor" href="#44-搜索框交互"></a> 4.4 搜索框：交互</h3><h3 id="45-搜索框交互-2"><a class="markdownIt-Anchor" href="#45-搜索框交互-2"></a> 4.5 搜索框：交互 2</h3><h3 id="46-搜索框样式"><a class="markdownIt-Anchor" href="#46-搜索框样式"></a> 4.6 搜索框：样式</h3><h3 id="47-搜索框动画"><a class="markdownIt-Anchor" href="#47-搜索框动画"></a> 4.7 搜索框：动画</h3>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;经过前面章节的学习，我觉得宁皓网上教程的章节分段和命名缺乏逻辑，或者说缺少一些通用性的章节分段和命名原则，我个人认为这对学习是不利的。&lt;/p&gt;
&lt;p&gt;由于我是边学习边记录，目前我笔记的章节依然与宁皓网上的章节设置保持一致。如果我今后有足够耐心的话，也许会重新整理这些笔记。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://alt.trai25.me/categories/Notes/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="笔记" scheme="https://alt.trai25.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="开发" scheme="https://alt.trai25.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/tags/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记 | 网站 03 - 导航（1/2）</title>
    <link href="https://alt.trai25.me/2018/04/13/ninghao-website-03-navigation-1/"/>
    <id>https://alt.trai25.me/2018/04/13/ninghao-website-03-navigation-1/</id>
    <published>2018-04-13T09:08:51.000Z</published>
    <updated>2018-04-27T09:39:39.547Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><ul><li>因为「网站」系列教程第二章《线框图》是设计相关的内容，我就直接跳过，进入第三章《导航设计》。</li><li>由于我会跳过其中关于设计的部分，所以笔记标题也会去掉「设计」，改为《导航》。</li><li>目前我还是初学阶段，所以目前这份笔记会保留很多细节。相信当我对代码越来越熟练，后期的笔记也会更精简。</li></ul></div><p>本章记录了导航栏的代码结构和学习过程。</p><a id="more"></a><p>笔记合集：<a href="/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/%E7%BD%91%E7%AB%99/">学习笔记 | 网站</a></p><hr><h2 id="1-准备"><a class="markdownIt-Anchor" href="#1-准备"></a> 1 准备</h2><p>首先从 <code>终端</code> 进入项目文件夹，从 Git 上 <code>pull</code> 一下最新的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br></pre></td></tr></table></figure><p>查看一下所在的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br></pre></td></tr></table></figure><p>如果不在 <code>master</code> 分支的话，切换到该分支去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br></pre></td></tr></table></figure><p>切换到本章教程对应的项目版本 <code>v3.2.1-start</code>（设计：导航 - 准备资源）：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v3<span class="number">.2</span><span class="number">.1</span>-start</span><br></pre></td></tr></table></figure><p>打开项目目录，在 <code>design</code> 目录中包含了本章设计用到的 <code>.sketch</code> 文件。</p><div class="note info"><p>本章第二节内容原为「导航设计」，这里直接跳过，进入「Sass」的内容。</p></div><h2 id="2-sass"><a class="markdownIt-Anchor" href="#2-sass"></a> 2 Sass</h2><h3 id="21-创建页面的准备"><a class="markdownIt-Anchor" href="#21-创建页面的准备"></a> 2.1 创建页面的准备</h3><p>先 <code>pull</code> 一下项目，并切换到标签 <code>v3.2.3</code>（设计：导航 - 边栏，此为「导航设计」后的版本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout v3.2.3</span></span><br></pre></td></tr></table></figure><h3 id="22-增强型-csssass-与-less"><a class="markdownIt-Anchor" href="#22-增强型-csssass-与-less"></a> 2.2 增强型 CSS：Sass 与 Less</h3><p>本项目已支持 <code>Sass</code> 和 <code>Less</code>（具体是怎么让它支持的，我也不知道，暂时不管，以后再去了解），可以使用它们创建样式。</p><ul><li><code>Sass</code> 可以使用一些 <code>CSS</code> 所没有的增强功能，比如定义变量 <code>variables</code>、<code>mixins</code></li></ul><div class="note info"><p><code>Sass</code> 和 <code>Less</code> 是 <code>CSS</code> 的预处理器，教程里说可以将它们理解为增强版的 <code>CSS</code>。而我自己认为它们和 <code>CSS</code> 的关系有点类似 <code>Markdown</code> 和 <code>Plain Text</code> 的关系。</p></div><p>扩展阅读：</p><ul><li><a href="http://efe.baidu.com/blog/revisiting-css-preprocessors/" target="_blank" rel="noopener">再谈 CSS 预处理器</a></li><li><a href="https://www.cnblogs.com/wangpenghui522/p/5467560.html" target="_blank" rel="noopener">Sass/Scss 和 Less 的区别</a></li></ul><h3 id="23-在项目里使用-sass"><a class="markdownIt-Anchor" href="#23-在项目里使用-sass"></a> 2.3 在项目里使用 Sass</h3><p>本章介绍了一些 <code>Sass</code> 的基本用法</p><h4 id="231-mainscss"><a class="markdownIt-Anchor" href="#231-mainscss"></a> 2.3.1 main.scss</h4><p>首先，将 <code>app/styles</code> 目录下的 <code>main.css</code> 重命名为 <code>main.scss</code>，当项目编译的时候会自动将该 <code>Sass</code> 文件编译成普通的 <code>main.css</code> 文件，存放到 <code>.tmp/styles</code> 和 <code>dist/styles</code> 目录中。</p><p><code>Sass</code> 可以使用 <code>$</code> 来定义变量，可以直接在 <code>main.scss</code> 中使用这些变量。比如在 <code>main.scss</code> 中添加如下代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量的值</span></span><br><span class="line"><span class="variable">$page-background</span>: <span class="number">#246346</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用变量</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$page-background</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存修改后，页面的背景色将会变成 <code>#246346</code>。编译后的 <code>main.css</code> 会存放到 <code>.tmp/styles</code> 和 <code>dist/styles</code> 目录中，内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#246346</span>&#125;</span><br><span class="line"><span class="comment">/*# sourceMappingURL=main.css.map */</span></span><br></pre></td></tr></table></figure><p>但如果把所有样式和变量等内容全都直接写进 <code>main.scss</code>，文件就会变得过于复杂，不方便管理和修改，所以更好的办法是把这些内容作为 <code>Partial</code>（可以理解为模块）放到多个不同的 <code>.scss</code> 文件中，然后再用 <code>main.scss</code> 调用这些模块。</p><blockquote><p>可复用属性尽量抽离为页面变量，易于统一维护。<br><cite><a href="https://guide.aotu.io/docs/css/sass.html#%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">aotu.io 前端代码规范</a></cite></p></blockquote><h4 id="232-partial-模块"><a class="markdownIt-Anchor" href="#232-partial-模块"></a> 2.3.2 Partial 模块</h4><div class="note info"><p><code>Partial</code> 是以 <code>_</code> 作为文件名开头的 <code>.scss</code> 文件。可以将这类文件想象成「模块」，这种文件不会被单独编译，需要通过 <code>@import</code> 将其作为一个模块导入到其它 <code>.scss</code> 文件中使用。 用 Partial 模块来组织</p></div><p><strong>将页面背景颜色等基础样式拆分到 Partial 文件 _base.scss 中：</strong></p><ol><li><p>在 <code>app/styles</code> 目录中新建一个 <code>_base.scss</code> 文件。</p></li><li><p>将前文 <code>main.scss</code> 中的内容剪切到<code>_base.scss</code> 文件中。</p></li><li><p>在 <code>main.scss</code> 中添加如下代码以导入  <code>_base.scss</code>：</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"base"</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>将页面背景色变量拆分到 Partial 文件 _variables.scss 中：</strong></p><ol><li>在同一位置新建文件 <code>_variables.scss</code>。</li><li>在 <code>_main.scss</code> 中添加 <code>@import &quot;variables&quot;;</code>，以导入变量 Partial 文件 <code>_variables.scss</code>。</li><li>将之前 <code>_base.scss</code> 中的定义的页面背景色变量 <code>$page-background: #246346;</code> 剪切到 <code>_variables.scss</code> 中。</li></ol><p><strong>新增其它变量：</strong></p><p>以给 <code>body</code> 元素定义字体为例：</p><ol><li><p>在 <code>_variables.scss</code> 文件中添加一行定义字体变量的代码：</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font</span>: <span class="string">'PingFangSC-Light'</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>_base.scss</code> 里的 <code>body{}</code> 中引用字体变量：</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="variable">$page-background</span>;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="variable">$font</span>;     <span class="comment">// 引用 `_variables.scss` 中的 `$font` 变量来定义字体样式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>举一反三，其它变量也可以通过以上方式添加到项目中。</p><h2 id="3-样式"><a class="markdownIt-Anchor" href="#3-样式"></a> 3 样式</h2><h3 id="31-组织样式的方法"><a class="markdownIt-Anchor" href="#31-组织样式的方法"></a> 3.1 组织样式的方法</h3><p><code>CSS</code> 中的类 <code>class</code> 有多种命名和组织方法，如：</p><ul><li>bem</li><li>smacss</li><li>oocss</li><li>atomic</li></ul><p>这些方法并不是必须的，我也不知道这些方法具体的定义和用法，暂时先不管。</p><div class="note info"><p>Semantic UI 框架也有自己的一套组织样式的方法，通过 <code>ui</code> 这个 Semantic UI 标志性的类进行组织。在开发过程中除了使用 Semantic UI 预设的类，还会使用一些自定义的类，而这些自定义内容也应遵循 Semantic UI 的组织方法，用到 <code>ui</code> 这个类。</p></div><h3 id="32-代码导航的代码结构"><a class="markdownIt-Anchor" href="#32-代码导航的代码结构"></a> 3.2 代码：导航的代码结构</h3><p>导航栏的 <code>html</code> 代码结构如下，位于 <code>&lt;body&gt;</code> 标签中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui navbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>几层嵌套，在 <code>&lt;div class=&quot;content&quot;&gt;</code> 中添加导航栏左侧的 Logo。至于为什么一定要嵌套这么几层，这几个标签具体的功能，我就不知道了，我甚至不知道应该从哪儿获取这方面的信息（我在 Semantic UI 官方文档里并没有找到关于这些标签的说明），也许以后会弄明白吧。</p><h3 id="33-样式导航的样式"><a class="markdownIt-Anchor" href="#33-样式导航的样式"></a> 3.3 样式：导航的样式</h3><h4 id="331-为导航栏创建独立的-sass-样式表文件"><a class="markdownIt-Anchor" href="#331-为导航栏创建独立的-sass-样式表文件"></a> 3.3.1 为导航栏创建独立的 Sass 样式表文件</h4><p>在 <code>app/styles</code> 目录中新建 <code>navbar.scss</code> 文件，并为其添加样式如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择同时满足 `.ui` 和 `.navbar` 类的元素，并为其指定颜色</span></span><br><span class="line"><span class="selector-class">.ui</span><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择 `.ui.navbar` 类元素中嵌套的 `.header` 类中直接嵌套的 `img` 元素。</span></span><br><span class="line"><span class="comment">// 具体说就是，先选择 `.ui.navbar` 类元素中嵌套的 `.header`，`&gt;` 表示 `img` 元素是「直接」嵌套在 `.header` 类元素里的，而被其它元素嵌套的 `img` 元素则不符合这条规则。</span></span><br><span class="line"><span class="selector-class">.ui</span><span class="selector-class">.navbar</span> <span class="selector-class">.header</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="332-利用-sass-的嵌套特性重构代码结构"><a class="markdownIt-Anchor" href="#332-利用-sass-的嵌套特性重构代码结构"></a> 3.3.2 利用 Sass 的嵌套特性重构代码结构</h4><p>Sass 支持样式表嵌套，所以 <strong>3.3.2</strong> 中创建的代码也可以写作以下形式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ui</span><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 `.header` 是 `.ui.navbar` 中的嵌套元素，这里可以将 `.ui.navbar .header` 改为 `.header`，并将其样式直接放进 `.ui.navbar &#123;&#125;` 中。</span></span><br><span class="line">  <span class="selector-class">.header</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本章完。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;ul&gt;
&lt;li&gt;因为「网站」系列教程第二章《线框图》是设计相关的内容，我就直接跳过，进入第三章《导航设计》。&lt;/li&gt;
&lt;li&gt;由于我会跳过其中关于设计的部分，所以笔记标题也会去掉「设计」，改为《导航》。&lt;/li&gt;
&lt;li&gt;目前我还是初学阶段，所以目前这份笔记会保留很多细节。相信当我对代码越来越熟练，后期的笔记也会更精简。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;本章记录了导航栏的代码结构和学习过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://alt.trai25.me/categories/Notes/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="笔记" scheme="https://alt.trai25.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="开发" scheme="https://alt.trai25.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/tags/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>格式塔原理 | Gestalt Principles Thread via Pablo Stanley</title>
    <link href="https://alt.trai25.me/2018/04/12/Gestalt-Principles-Thread-via-Pablo-Stanley/"/>
    <id>https://alt.trai25.me/2018/04/12/Gestalt-Principles-Thread-via-Pablo-Stanley/</id>
    <published>2018-04-12T07:52:26.000Z</published>
    <updated>2018-04-12T08:01:14.657Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://twitter.com/pablostanley" target="_blank" rel="noopener">Pablo Stanley</a> 在 Twitter 上发了一系列共 8 条关于格式塔原理的推文，我把它们集结成「瞬间」记录一下。</p><a id="more"></a><p><a class="twitter-moment" href="https://twitter.com/i/moments/984336510005559297?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">格式塔原理 | Gestalt Principles Thread - Pablo Stanley</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/pablostanley&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pablo Stanley&lt;/a&gt; 在 Twitter 上发了一系列共 8 条关于格式塔原理的推文，我把它们集结成「瞬间」记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="UIUX" scheme="https://alt.trai25.me/categories/UIUX/"/>
    
    
      <category term="UIUX" scheme="https://alt.trai25.me/tags/UIUX/"/>
    
      <category term="格式塔" scheme="https://alt.trai25.me/tags/%E6%A0%BC%E5%BC%8F%E5%A1%94/"/>
    
      <category term="Pablo Stanley" scheme="https://alt.trai25.me/tags/Pablo-Stanley/"/>
    
      <category term="Twitter" scheme="https://alt.trai25.me/tags/Twitter/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记 | 网站 01 - 工作流</title>
    <link href="https://alt.trai25.me/2018/04/10/ninghao-web-01-workflow/"/>
    <id>https://alt.trai25.me/2018/04/10/ninghao-web-01-workflow/</id>
    <published>2018-04-10T11:13:41.000Z</published>
    <updated>2018-04-16T06:07:40.403Z</updated>
    
    <content type="html"><![CDATA[<p>本章是关于<strong>工作流</strong>的学习笔记，包含了在正式开始开发工作之前需要的准备工作，了解项目开发需要用到的环境配置、工具和操作流程。</p><a id="more"></a><p><a href="https://ninghao.net/course/4688" target="_blank" rel="noopener">课程链接</a></p><h2 id="1-工作流"><a class="markdownIt-Anchor" href="#1-工作流"></a> 1 工作流</h2><h3 id="11-工作流与工具"><a class="markdownIt-Anchor" href="#11-工作流与工具"></a> 1.1 工作流与工具</h3><p><a href="https://ninghao.net/video/4690" target="_blank" rel="noopener">视频教程链接</a></p><p>理论上来说，最简化的工作流是：</p><ol><li>通过文本编辑器编辑代码</li><li>通过浏览器调试与预览页面</li></ol><p>但考虑到还有一些中间环节，实际的流程会稍微复杂一些，但无论如何，</p><div class="note info"><p>应该尽可能只用必要的工具，避免复杂化带来的问题和冗余流程。</p></div><h3 id="12-介绍使用的工具"><a class="markdownIt-Anchor" href="#12-介绍使用的工具"></a> 1.2 介绍使用的工具</h3><p><a href="https://ninghao.net/video/4691" target="_blank" rel="noopener">视频教程链接</a></p><h4 id="121-文本编辑器"><a class="markdownIt-Anchor" href="#121-文本编辑器"></a> 1.2.1 文本编辑器</h4><p>推荐使用 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 出品的开源编辑器 <a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>。</p><p><img src="/uploads/15224996072117.png" alt=""></p><h4 id="122-命令行工具"><a class="markdownIt-Anchor" href="#122-命令行工具"></a> 1.2.2 命令行工具</h4><p>Mac 用户可以使用系统自带的 <strong>终端 App</strong> 或 <a href="http://www.iterm2.com" target="_blank" rel="noopener">iTerm</a>。</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/Xnip2018-04-98_17-03-41-1.png" class="full-image" alt="终端" title="终端"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h4 id="123-版本控制"><a class="markdownIt-Anchor" href="#123-版本控制"></a> 1.2.3 版本控制</h4><p>推荐使用 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> + <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p><p>通过 <a href="https://brew.sh/" target="_blank" rel="noopener">homebrew</a> 安装 Git：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>git</span><br></pre></td></tr></table></figure><h4 id="124-nodejs"><a class="markdownIt-Anchor" href="#124-nodejs"></a> 1.2.4 Node.js</h4><p>直接在 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js 官网</a> 下载安装</p><p><strong>包管理工具</strong></p><p>开发过程中会用到一些 Node.js 的功能包，这些功能包都需要一个<strong>包管理工具</strong>来进行管理，Node.js 安装后会自带一个包管理工具 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>，也可以安装更可靠、速度更快的 <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarn</a> ：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>yarn</span><br></pre></td></tr></table></figure><p>如果要使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或类似的 Node.js 版本管理工具，应该排除安装 Node.js 以便使用 nvm 的 Node.js 版本：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install yarn --without-<span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><h3 id="13-准备前端页面设计工作流"><a class="markdownIt-Anchor" href="#13-准备前端页面设计工作流"></a> 1.3 准备前端页面设计工作流</h3><p><a href="https://ninghao.net/video/4692" target="_blank" rel="noopener">视频教程链接</a></p><h4 id="131-clone-项目到本地"><a class="markdownIt-Anchor" href="#131-clone-项目到本地"></a> 1.3.1 Clone 项目到本地</h4><p>宁皓网的「网站」教程已提前准备好一套可用的工作流，只需将它从 GitHub 上 Clone 到本地既可。</p><p>在 <code>终端</code> 中进入准备存放项目的目录，比如 <code>~/Desktop/trai25-project</code>，并将预先准备好的 <a href="https://github.com/ninghao/webapp-season1-pages" target="_blank" rel="noopener">工作流远程仓库</a> Clone 到这个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/Desktop/trai25-project</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ninghao/webapp-season1-pages.git</span></span><br></pre></td></tr></table></figure><p>进入项目目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> webapp-season1-pages</span></span><br></pre></td></tr></table></figure><p>通过 <code>git</code> 命令，根据需要将项目切换到相应的版本。如，切换到版本 <code>v1.0.0</code>：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v1<span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h4 id="132-安装项目依赖"><a class="markdownIt-Anchor" href="#132-安装项目依赖"></a> 1.3.2 安装项目依赖</h4><p>用 Atom 编辑器查看项目文件，直接启动 Atom.app，或通过命令行工具启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> atom ./</span></span><br></pre></td></tr></table></figure><p>可以看到项目根目录结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── app</span><br><span class="line">├── design</span><br><span class="line">├── dist</span><br><span class="line">├── gulpfile<span class="selector-class">.babel</span><span class="selector-class">.js</span></span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── semantic</span><br><span class="line">├── semantic.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>查看根目录中 <code>package.json</code> 文件，该文件包含了本项目的相关信息，比如<strong>项目名称</strong> <code>name</code>、<strong>项目版本</strong> <code>version</code> 等等…</p><p>其中非常重要的是项目相关的依赖包：</p><ul><li><code>devDependencies</code> ：项目的开发依赖</li><li><code>dependencied</code> 项目的依赖</li></ul><p>通过 <code>yarn</code> 包管理工具自动安装项目所需依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br></pre></td></tr></table></figure><p>安装完成后项目根目录中会新增一个 <code>node_modules</code> 目录，上一步安装的依赖包都安装在了这个目录。</p><h3 id="14-了解项目的文件与目录"><a class="markdownIt-Anchor" href="#14-了解项目的文件与目录"></a> 1.4 了解项目的文件与目录</h3><p><a href="https://ninghao.net/video/4693" target="_blank" rel="noopener">视频教程链接</a></p><p>在上一小节中，安装了必要的依赖包后，项目根目录中应包含以下内容：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="string">.git/</span>               <span class="comment"># 项目的 git 仓库目录</span></span><br><span class="line">├── app/                <span class="comment"># 编译后的网站的目录</span></span><br><span class="line">├── node_modules/               <span class="comment"># Node.js 依赖包目录</span></span><br><span class="line">├── semantic/               <span class="comment"># Semantic UI 目录</span></span><br><span class="line">├── <span class="string">.babelrc</span>                <span class="comment"># babel 的配置文件</span></span><br><span class="line">├── <span class="string">.editorconfig</span>               <span class="comment"># atom 编辑器的配置文件，并非项目文件</span></span><br><span class="line">├── <span class="string">.gitignore</span>              <span class="comment"># 定义了 git 版本控制时需要忽略的内容</span></span><br><span class="line">├── README.md               <span class="comment"># 项目说明文当</span></span><br><span class="line">├── gulpfile.babel.js               <span class="comment"># 定义了 gulp 自动化处理时要执行的任务</span></span><br><span class="line">├── package.json                <span class="comment"># 对整个项目的描述</span></span><br><span class="line">├── semantic.json               <span class="comment"># Semantic UI 框架的配置文件</span></span><br><span class="line">├── yarn.lock               <span class="comment"># 描述了需要通过 yarn 安装的依赖包的具体版本</span></span><br></pre></td></tr></table></figure><h2 id="2-自动化任务"><a class="markdownIt-Anchor" href="#2-自动化任务"></a> 2 自动化任务</h2><h3 id="21-自动化任务"><a class="markdownIt-Anchor" href="#21-自动化任务"></a> 2.1 自动化任务</h3><p><a href="https://ninghao.net/video/4695" target="_blank" rel="noopener">视频教程链接</a></p><h4 id="211-编译-semantic-ui-框架"><a class="markdownIt-Anchor" href="#211-编译-semantic-ui-框架"></a> 2.1.1 编译 Semantic UI 框架</h4><p>首先进入项目目录，编译 <code>Semantic UI</code> 框架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> webapp-season1-pages</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gulp build-ui</span></span><br></pre></td></tr></table></figure><p><code>gulp build-ui</code> 命令将执行 <code>gulpfile.babel.js</code> 文件中定义的相应任务，比如将 <code>.less</code> 样式文件编译成普通的 <code>.css</code> 文件，编译好的文件会放到 <code>/semantic/dist/</code> 目录中。</p><p>如果想修改编译后文件的存放位置，可以在项目根目录下 <code>semantic.json</code> 文件中修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"output": &#123;</span><br><span class="line">"packaged": "dist/",</span><br><span class="line">"uncompressed": "dist/components/",</span><br><span class="line">"compressed": "dist/components/",</span><br><span class="line">"themes": "dist/themes/"</span><br></pre></td></tr></table></figure><h4 id="212-监视并自动编译-semantic-ui-的变化"><a class="markdownIt-Anchor" href="#212-监视并自动编译-semantic-ui-的变化"></a> 2.1.2 监视并自动编译 Semantic UI 的变化</h4><p>每次修改了 <code>Semantic UI</code> 之后都需要执行 <code>gulp build-ui</code> 命令重新编译一次。这里可以执行另一个自动化任务，它可以在每次修改后自动编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gulp watch-ui</span></span><br></pre></td></tr></table></figure><p>这个任务会持续监视 <code>Semantic UI</code> 的变化并自动编译。</p><h4 id="213-创建本地服务器"><a class="markdownIt-Anchor" href="#213-创建本地服务器"></a> 2.1.3 创建本地服务器</h4><p>需要创建一个本地服务器来运行编译好的网站。为避免中断 <code>gulp build-ui</code> 任务，在终端<strong>新开一个标签页</strong>，输入命令创建服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gulp serve</span></span><br></pre></td></tr></table></figure><p>当服务器创建完成后，会在浏览器中自动打开地址 <code>localhost:3300</code>，该页面的内容就是 <code>app/index.html</code> 文件。</p><div class="note info"><p>只要 <code>gulp watch-ui</code> 和 <code>gulp serve</code> 任务没有中断，当文件编辑后就能在浏览器中即时呈现。</p></div><h3 id="22-本地服务器"><a class="markdownIt-Anchor" href="#22-本地服务器"></a> 2.2 本地服务器</h3><h4 id="221-browsersync-浏览器同步"><a class="markdownIt-Anchor" href="#221-browsersync-浏览器同步"></a> 2.2.1 Browsersync 浏览器同步</h4><p>在上一步中启动服务器后，返回如下相关信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[NINGHAO]</span> <span class="string">Access</span> <span class="attr">URLs:</span></span><br><span class="line"><span class="bullet"> -</span><span class="bullet">---------------------------------</span></span><br><span class="line"><span class="attr">       Local:</span> <span class="attr">http://localhost:3300</span>             <span class="comment"># 本地服务器地址</span></span><br><span class="line"><span class="attr">    External:</span> <span class="attr">http://10.0.0.4:3300</span>              <span class="comment"># 服务器外部访问地址（局域网）</span></span><br><span class="line"><span class="bullet"> -</span><span class="bullet">---------------------------------</span></span><br><span class="line"><span class="attr">          UI:</span> <span class="attr">http://localhost:3001</span>               </span><br><span class="line"> <span class="string">UI</span> <span class="attr">External:</span> <span class="attr">http://10.0.0.4:3001</span></span><br><span class="line"><span class="bullet"> -</span><span class="bullet">---------------------------------</span></span><br><span class="line"><span class="string">[NINGHAO]</span> <span class="string">Serving</span> <span class="string">files</span> <span class="attr">from:</span> <span class="string">.tmp</span></span><br><span class="line"><span class="string">[NINGHAO]</span> <span class="string">Serving</span> <span class="string">files</span> <span class="attr">from:</span> <span class="string">app</span></span><br><span class="line"><span class="string">[NINGHAO]</span> <span class="string">Serving</span> <span class="string">files</span> <span class="attr">from:</span> <span class="string">node_modules</span></span><br><span class="line"><span class="string">[NINGHAO]</span> <span class="string">Serving</span> <span class="string">files</span> <span class="attr">from:</span> <span class="string">semantic/dist</span></span><br></pre></td></tr></table></figure><div class="note info"><p>这里是通过 <a href="https://browsersync.io/" target="_blank" rel="noopener">Browsersync</a> 为项目创建服务器并提供了浏览器同步功能，其中的 <code>Local</code> 和 <code>External</code> 两个地址的内容是完全同步的。</p></div><h4 id="212-同步测试"><a class="markdownIt-Anchor" href="#212-同步测试"></a> 2.1.2 同步测试</h4><p>打开的页面由于没有添加内容，浏览器中显示一片空白。这时候可以尝试在 <code>app/index.html</code> 的 <code>&lt;body&gt;</code> 下添加一些内容，保存文件后浏览器中就会有所呈现。</p><h3 id="22-深入了解自动化任务"><a class="markdownIt-Anchor" href="#22-深入了解自动化任务"></a> 2.2 深入了解自动化任务</h3><p>本项目使用 <code>Gulp</code> 来执行自动化任务，具体的任务在根目录下 <code>gulofile.babel.js</code> 中定义。</p><div class="note info"><p>这里知道就行了，暂时没必要搞太清楚（实际上是我搞不清楚），总之就是通过 <code>Gulp</code> 来执行一系列提前预设好的流程。我把它理解成网站开发时用的 <a href="https://workflow.is/" target="_blank" rel="noopener">Workflow app</a>。</p></div><h3 id="23-深入了解本地服务器"><a class="markdownIt-Anchor" href="#23-深入了解本地服务器"></a> 2.3 深入了解本地服务器</h3><p>在 <code>gulpfile.babel.js</code> 文件中定义了<strong>本地服务器自动化任务</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Watch files for changes &amp; reload</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>, [<span class="string">'scripts'</span>, <span class="string">'styles'</span>], () =&gt; &#123;</span><br><span class="line">  browserSync(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// Customize the Browsersync console logging prefix</span></span><br><span class="line">    logPrefix: <span class="string">'NINGHAO'</span>,</span><br><span class="line">    <span class="comment">// Allow scroll syncing across breakpoints</span></span><br><span class="line">    scrollElementMapping: [<span class="string">'main'</span>, <span class="string">'.mdl-layout'</span>],</span><br><span class="line">    <span class="comment">// Run as an https by uncommenting 'https: true'</span></span><br><span class="line">    <span class="comment">// Note: this uses an unsigned certificate which on first access</span></span><br><span class="line">    <span class="comment">//       will present a certificate warning in the browser.</span></span><br><span class="line">    <span class="comment">// https: true,</span></span><br><span class="line">    server: [<span class="string">'.tmp'</span>, <span class="string">'app'</span>, <span class="string">'node_modules'</span>, <span class="string">'semantic/dist'</span>],</span><br><span class="line">    port: <span class="number">3300</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  gulp.watch([<span class="string">'app/**/*.html'</span>], reload);</span><br><span class="line">  gulp.watch([<span class="string">'app/styles/**/*.&#123;scss,css&#125;'</span>], [<span class="string">'styles'</span>, reload]);</span><br><span class="line">  gulp.watch([<span class="string">'app/scripts/**/*.js'</span>], [<span class="string">'lint'</span>, <span class="string">'scripts'</span>, reload]);</span><br><span class="line">  gulp.watch([<span class="string">'app/images/**/*'</span>], reload);</span><br><span class="line">  gulp.watch([<span class="string">'semantic/dist/**/*.&#123;css,js&#125;'</span>], reload);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-页面"><a class="markdownIt-Anchor" href="#3-页面"></a> 3 页面</h2><h3 id="31-页面"><a class="markdownIt-Anchor" href="#31-页面"></a> 3.1 页面</h3><p><a href="https://ninghao.net/video/4700" target="_blank" rel="noopener">视频教程链接</a></p><p>切换项目版本为 <code>v1.2.3</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v1.2.3</span><br></pre></td></tr></table></figure><p>这时候目录结构如下（仅限 2 级目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── app                 // 编译后的网站文件</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── index.html              // 网站首页</span><br><span class="line">│   ├── scripts</span><br><span class="line">│   ├── service-worker.js</span><br><span class="line">│   └── styles</span><br><span class="line">├── dist</span><br><span class="line">│   ├── scripts</span><br><span class="line">│   └── styles</span><br><span class="line">├── gulpfile.babel.js</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── [...]               // 由于 node_modules 下的子目录数量巨大，这里先省略</span><br><span class="line">├── package.json</span><br><span class="line">├── semantic</span><br><span class="line">│   ├── dist</span><br><span class="line">│   ├── gulpfile.js</span><br><span class="line">│   ├── src</span><br><span class="line">│   └── tasks</span><br><span class="line">├── semantic.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>先看看 <code>app/index.html</code>，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-Hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery/dist/jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"semantic.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/main.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里引用了一些外部文件：</p><p>在 <code>&lt;head&gt;</code> 标签里的<strong>样式表文件：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有在 <code>&lt;/body&gt;</code> 前面的 <strong>Javascript 文件：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery/dist/jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"semantic.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/main.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而教程中说，这几个被引用的文件真实位置并不是 <code>href=&quot;&quot;</code> 和 <code>src=&quot;&quot;</code> 中的位置，而是来自几个文件夹：</p><ul><li><code>.tmp/style</code></li><li><code>dist/style</code></li><li><code>semantic/dist/style</code></li></ul><p>但至于是如何实现的，我并不知道（视频教程里也只提到 what，没解释 why，也没解释 how），现在先不管，跟着教程做，以后再来慢慢搞清楚。</p><div class="note warning"><p>视频教程中说 <code>dist</code> 目录里是最终的发行版。但之前也说过 <code>app</code> 目录是最终编译好的版本，并且在建立本地服务器时也使用的这个文件夹，这让我有些糊涂，不知道「发行版」和「编译好的版本」在概念上应该怎样区分。</p><p>并且，教程中说，可以在 <code>app/script</code> 目录中编写 <code>javascript</code> 代码，最终会被编译好后放在 <code>.tmp</code> 和 <code>dist</code> 目录中，我越听越糊涂。</p></div><hr><div class="note default"><p><strong>一些牢骚：</strong> 这个系列教程的优点是精炼，几乎没有什么废话，但也经常产生副作用，就是往往只有 <strong>what</strong>，缺少 <strong>why</strong> 和 <strong>how</strong>，而且缺乏较为系统性、逻辑性的教学结构，导致初学者跟着教程能做出来，但因为并不清楚其中的很多原理，很难举一反三，至少对我来说是这样。</p></div><h3 id="32-页面交互功能与样式"><a class="markdownIt-Anchor" href="#32-页面交互功能与样式"></a> 3.2 页面交互功能与样式</h3><p><a href="https://ninghao.net/video/4701" target="_blank" rel="noopener">视频教程链接</a></p><h4 id="321-引入-javascript-脚本库"><a class="markdownIt-Anchor" href="#321-引入-javascript-脚本库"></a> 3.2.1 引入 JavaScript 脚本库</h4><p>在项目版本 <code>v1.2.3</code> 中，<code>index.html</code> 文件中已经包含了项目需要的 <code>js</code> 脚本库：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jquery 库大概是页面开发的标配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery/dist/jquery.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 本项目使用的框架 Semantic UI 的完整脚本库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"semantic.min.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义的脚本放在 main.js 库中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/main.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="322-引入样式表"><a class="markdownIt-Anchor" href="#322-引入样式表"></a> 3.2.2 引入样式表</h4><p>在 <code>index.html</code> 文件中已经预先链接了一个样式表 <code>main.css</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为需要用到 <code>Semantic UI</code> 提供的样式，所以这里要把这些样式表添加到主样式表 <code>styles/main.css</code> 的上面，让它们拥有更高的优先级。</p><div class="note info"><p>在页面文件中链接样式表的前后顺序决定了样式表的优先级，越靠前的优先级越高。</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- reset.css 用来覆盖掉浏览器的默认样式（它的真实位置在 semantic/dist/components/ 目录下） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"components/reset.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 基础样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"components/site.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用于页面布局的容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"components/container.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 网格系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"components/grid.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成后可以通过浏览器查看 <code>localhost:3300</code> 页面的源代码，以上内容应该都会出现在里面。这时候可以点击这些样式表的链接，验证是否能打开这些样式表文件。</p><hr><p>到这一步，「网站」第一章《工作流》就结束了。本章教程结尾部分还有一些将网站文件<code>push</code> 到 GitHub 的操作，这里就省略了，反正我每一章都会直接切换教程进度对应的版本来学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章是关于&lt;strong&gt;工作流&lt;/strong&gt;的学习笔记，包含了在正式开始开发工作之前需要的准备工作，了解项目开发需要用到的环境配置、工具和操作流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://alt.trai25.me/categories/Notes/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="笔记" scheme="https://alt.trai25.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="开发" scheme="https://alt.trai25.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/tags/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记 | 网站 00 - 开始</title>
    <link href="https://alt.trai25.me/2018/04/10/ninghao-website-00-introduction/"/>
    <id>https://alt.trai25.me/2018/04/10/ninghao-website-00-introduction/</id>
    <published>2018-04-10T09:32:31.000Z</published>
    <updated>2018-04-27T09:36:00.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我是一个记性很差的人，却热爱学习新知识，这两个属性的组合基本就是个悲剧。<br><cite><a href="https://blog.trai25.me" target="_blank" rel="noopener">trai25</a></cite></p></blockquote><p>最近开始在 <a href="https://ninghao.net/" target="_blank" rel="noopener">宁皓网</a> 学习一些网站开发的入门知识，我想把这个过程记录下来。</p><a id="more"></a><div class="note warning"><p><strong>注意：</strong> 本笔记并不是对外写的教程，只是为了方便我自己学习和回顾而已，完全是基于宁皓网视频教程的记录，如果你没有看过这套教程，我的这些笔记很可能对你没什么意义。出于想避免以后回过头来自己都看不懂的动机（前面说了，我记性很差，我怕再回过头来看的时候前面学的都忘得差不多了），所以想尽量把这些内容写得别人（当然是也看过视频教程的）也看得懂，这样才能保证当我失忆以后也能看懂。</p></div><p>另外，教程中涉及到<strong>设计</strong>的部分我都不会在这里记录，因为其实这部分内容并不是讲如何设计，而是讲如何在 Sketch App 中把设计稿做出来，而这部分我完全不需要教学。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我是一个记性很差的人，却热爱学习新知识，这两个属性的组合基本就是个悲剧。&lt;br&gt;
&lt;cite&gt;&lt;a href=&quot;https://blog.trai25.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;trai25&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近开始在 &lt;a href=&quot;https://ninghao.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宁皓网&lt;/a&gt; 学习一些网站开发的入门知识，我想把这个过程记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://alt.trai25.me/categories/Notes/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/categories/Notes/%E5%AE%81%E7%9A%93%E7%BD%91/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="笔记" scheme="https://alt.trai25.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="开发" scheme="https://alt.trai25.me/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="网站" scheme="https://alt.trai25.me/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="宁皓网" scheme="https://alt.trai25.me/tags/%E5%AE%81%E7%9A%93%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>一部关于 Dieter Rams 的纪录片</title>
    <link href="https://alt.trai25.me/2018/04/02/documentary-rams/"/>
    <id>https://alt.trai25.me/2018/04/02/documentary-rams/</id>
    <published>2018-04-01T17:20:11.000Z</published>
    <updated>2018-04-11T07:54:58.250Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/13cbb9642a213ba7605e66a0a25d861c.jpg" class="full-image" alt="Full Image" title="fi"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>做设计的人可能很少有人不知道 Dieter Rams 吧，他提出的<a href="https://readymag.com/shuffle/dieter-rams/" target="_blank" rel="noopener">「好设计的十个原则」</a>（很多人将其译为「设计十戒」，我觉得完全是瞎翻译 —— 所谓「戒」应该是<strong>不能做的事</strong>才对，而「原则」是他认为<strong>必须做到的</strong>）也是被很多设计师奉为圣经。Rams 是设计界的传奇，他的设计影响了无数的人，而这些人后来决定了今天我们握在手里、摆在家里和任何地方的各种设备长成什么样子以及如何工作 —— 可以说，即便你从没听说过 Dieter Rams 这个名字，他的设计也很可能正在影响着你现在的生活。</p><a id="more"></a><p>拍摄了经典设计纪录片<a href="https://movie.douban.com/subject/1937190/" target="_blank" rel="noopener">《传奇字体》</a>、<a href="https://movie.douban.com/subject/3103413/" target="_blank" rel="noopener">《设计面面观》</a>和<a href="https://movie.douban.com/subject/4959621/" target="_blank" rel="noopener">《城市化》</a>的导演  <a href="https://movie.douban.com/celebrity/1304780/" target="_blank" rel="noopener">Gary Hustwit</a> 正在制作一部关于 Dieter Rams 的纪录片，片名就叫 <strong><a href="https://www.hustwit.com/rams" target="_blank" rel="noopener"> Rams</a></strong>，今年晚些时候应该就能上映，让我非常期待。</p><p>这里先放出三条预告片：</p><iframe src="https://player.vimeo.com/video/250511026" width="640" height="360" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe><iframe src="https://player.vimeo.com/video/250511115" width="640" height="360" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe><iframe src="https://player.vimeo.com/video/249834621" width="640" height="360" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/uploads/13cbb9642a213ba7605e66a0a25d861c.jpg&quot; class=&quot;full-image&quot; alt=&quot;Full Image&quot; title=&quot;fi&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;做设计的人可能很少有人不知道 Dieter Rams 吧，他提出的&lt;a href=&quot;https://readymag.com/shuffle/dieter-rams/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;「好设计的十个原则」&lt;/a&gt;（很多人将其译为「设计十戒」，我觉得完全是瞎翻译 —— 所谓「戒」应该是&lt;strong&gt;不能做的事&lt;/strong&gt;才对，而「原则」是他认为&lt;strong&gt;必须做到的&lt;/strong&gt;）也是被很多设计师奉为圣经。Rams 是设计界的传奇，他的设计影响了无数的人，而这些人后来决定了今天我们握在手里、摆在家里和任何地方的各种设备长成什么样子以及如何工作 —— 可以说，即便你从没听说过 Dieter Rams 这个名字，他的设计也很可能正在影响着你现在的生活。&lt;/p&gt;
    
    </summary>
    
      <category term="Media" scheme="https://alt.trai25.me/categories/Media/"/>
    
    
      <category term="Dieter Rams" scheme="https://alt.trai25.me/tags/Dieter-Rams/"/>
    
      <category term="纪录片" scheme="https://alt.trai25.me/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    
      <category term="电影" scheme="https://alt.trai25.me/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Git飞行规则 (Flight Rules)</title>
    <link href="https://alt.trai25.me/2018/03/30/flight-rules-for-git/"/>
    <id>https://alt.trai25.me/2018/03/30/flight-rules-for-git/</id>
    <published>2018-03-30T09:01:01.000Z</published>
    <updated>2018-04-16T06:06:09.270Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>本文是 <a href="https://github.com/k88hudson/git-flight-rules" target="_blank" rel="noopener">Flight rules for Git</a> 的中文版，<a href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md" target="_blank" rel="noopener">点击这里</a> 到达原文。</p></div><h1 id="git-飞行规则-flight-rules"><a class="markdownIt-Anchor" href="#git-飞行规则-flight-rules"></a> Git 飞行规则 (Flight Rules)</h1><h2 id="什么是飞行规则"><a class="markdownIt-Anchor" href="#什么是飞行规则"></a> 什么是&quot;飞行规则&quot;?</h2><p>一个 <a href="http://www.jsc.nasa.gov/news/columbia/fr_generic.pdf" target="_blank" rel="noopener">宇航员指南</a> (现在, 程序员们都在使用GIT) 是关于出现问题过后应该怎么操作。</p><blockquote><p><em>飞行规则(Flight Rules)</em> 是记录在手册上的来之不易的一系列知识，记录了某个事情发生的原因，以及怎样一步一步的进行处理。本质上, 它们是特定场景的非常详细的标准处理流程。 […]</p></blockquote><blockquote><p>自20世纪60年代初以来，NASA一直在捕捉(capturing)我们的失误，灾难和解决方案, 当时水星时代(Mercury-era)的地面小组首先开始将“经验教训”收集到一个纲要(compendium)中，该纲现在已经有上千个问题情景，从发动机故障到破损的舱口把手到计算机故障，以及它们对应的解决方案。</p></blockquote><p><cite>Chris Hadfield</cite>, <em>一个宇航员的生活指南(An Astronaut’s Guide to Life)</em>。</p><a id="more"></a><h2 id="这篇文章的约定"><a class="markdownIt-Anchor" href="#这篇文章的约定"></a> 这篇文章的约定</h2><p>为了清楚的表述，这篇文档里的所有例子使用了自定义的bash 提示，以便指示当前分支和是否有暂存的变化(changes)。分支名用小括号括起来，分支名后面跟的<code>*</code>表示暂存的变化(changes)。</p><h2 id="编辑提交editting-commits"><a class="markdownIt-Anchor" href="#编辑提交editting-commits"></a> 编辑提交(editting commits)</h2><p><a name="diff-last"></a></p><h3 id="我刚才提交了什么"><a class="markdownIt-Anchor" href="#我刚才提交了什么"></a> 我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。 你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git show</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -n1 -p</span><br></pre></td></tr></table></figure><p><a name="#i-wrote-the-wrong-thing-in-a-commit-message"></a></p><h3 id="我的提交信息commit-message写错了"><a class="markdownIt-Anchor" href="#我的提交信息commit-message写错了"></a> 我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend -m <span class="string">'xxxxxxx'</span></span><br></pre></td></tr></table></figure><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p><p><a name="commit-wrong-author"></a></p><h3 id="我提交commit里的用户名和邮箱不对"><a class="markdownIt-Anchor" href="#我提交commit里的用户名和邮箱不对"></a> 我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --author <span class="string">"New Authorname &lt;authoremail@mydomain.com&gt;"</span></span><br></pre></td></tr></table></figure><p>如果你需要修改所有历史, 参考 'git filter-branch’的指南页.</p><p><a href="#i-want-to-remove-a-file-from-a-commit"></a></p><h3 id="我想从一个提交commit里移除一个文件"><a class="markdownIt-Anchor" href="#我想从一个提交commit里移除一个文件"></a> 我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD^ myfile</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p><p><a name="⌫-pushed-commit"></a></p><h3 id="我想删除我的的最后一次提交commit"><a class="markdownIt-Anchor" href="#我想删除我的的最后一次提交commit"></a> 我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --hard</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure><p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">my</span>-branch*)$ git <span class="keyword">reset</span> --soft HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是rebase-safe的 (例如： 其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>； 更多, 请参考 <a href="#deleteremove-last-pushed-commit">the above section</a>。</p><p><a name="⌫-any-commit"></a></p><h3 id="删除任意提交commit"><a class="markdownIt-Anchor" href="#删除任意提交commit"></a> 删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure><p>或者做一个 <a href="#interactive-rebase">交互式rebase</a> 删除那些你想要删除的提交(commit)里所对应的行。</p><p><a name="#force-push"></a></p><h3 id="我尝试推一个修正后的提交amended-commit到远程但是报错"><a class="markdownIt-Anchor" href="#我尝试推一个修正后的提交amended-commit到远程但是报错"></a> 我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">To https://github.com/yourusername/repo.git</span><br><span class="line">! [rejected]        mybranch -&gt; mybranch (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/tanay1337/webmaker.org.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。 注意 – <em>总是</em> 确保你指明一个分支!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git push origin mybranch -f</span><br></pre></td></tr></table></figure><p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><p><a href="undo-git-reset-hard"></a></p><h3 id="我意外的做了一次硬重置hard-reset我想找回我的内容"><a class="markdownIt-Anchor" href="#我意外的做了一次硬重置hard-reset我想找回我的内容"></a> 我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br></pre></td></tr></table></figure><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的SHA，再重置一次:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard SHA1234</span><br></pre></td></tr></table></figure><p>这样就完成了。</p><h2 id="暂存staging"><a class="markdownIt-Anchor" href="#暂存staging"></a> 暂存(Staging)</h2><p><a href="#i-need-to-add-staged-changes-to-the-previous-commit"></a></p><h3 id="我需要把暂存的内容添加到上一次的提交commit"><a class="markdownIt-Anchor" href="#我需要把暂存的内容添加到上一次的提交commit"></a> 我需要把暂存的内容添加到上一次的提交(commit)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch*)$ git commit --amend</span><br></pre></td></tr></table></figure><p><a name="commit-partial-new-file"></a></p><h3 id="我想要暂存一个新文件的一部分而不是这个文件的全部"><a class="markdownIt-Anchor" href="#我想要暂存一个新文件的一部分而不是这个文件的全部"></a> 我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add --patch filename.x</span><br></pre></td></tr></table></figure><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)； 然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -N filename.x</span><br></pre></td></tr></table></figure><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><p><a href="stage-in-two-commits"></a></p><h3 id="我想把在一个文件里的变化changes加到两个提交commit里"><a class="markdownIt-Anchor" href="#我想把在一个文件里的变化changes加到两个提交commit里"></a> 我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p><p><a href="unstaging-edits-and-staging-the-unstaged"></a></p><h3 id="我想把暂存的内容变成未暂存把未暂存的内容暂存起来"><a class="markdownIt-Anchor" href="#我想把暂存的内容变成未暂存把未暂存的内容暂存起来"></a> 我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>这个有点困难， 我能想到的最好的方法是先stash未暂存的内容， 然后重置(reset)，再pop第一步stashed的内容, 最后再add它们。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -k</span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br><span class="line">$ git add -A</span><br></pre></td></tr></table></figure><h2 id="未暂存unstaged的内容"><a class="markdownIt-Anchor" href="#未暂存unstaged的内容"></a> 未暂存(Unstaged)的内容</h2><p><a href="move-unstaged-edits-to-new-branch"></a></p><h3 id="我想把未暂存的内容移动到一个新分支"><a class="markdownIt-Anchor" href="#我想把未暂存的内容移动到一个新分支"></a> 我想把未暂存的内容移动到一个新分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b my-branch</span><br></pre></td></tr></table></figure><p><a href="move-unstaged-edits-to-old-branch"></a></p><h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a class="markdownIt-Anchor" href="#我想把未暂存的内容移动到另一个已存在的分支"></a> 我想把未暂存的内容移动到另一个已存在的分支</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git checkout my-branch</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p><a href="i-want-to-discard-my-local-uncommitted-changes"></a></p><h3 id="我想丢弃本地未提交的变化uncommitted-changes"><a class="markdownIt-Anchor" href="#我想丢弃本地未提交的变化uncommitted-changes"></a> 我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one commit</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^</span><br><span class="line"><span class="comment"># two commits</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^^</span><br><span class="line"><span class="comment"># four commits</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD~4</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">(master)$ git checkout -f</span><br></pre></td></tr></table></figure><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset filename</span><br></pre></td></tr></table></figure><p><a href="i-want-to-discard-specific-unstaged-changes"></a></p><h3 id="我想丢弃某些未暂存的内容"><a class="markdownIt-Anchor" href="#我想丢弃某些未暂存的内容"></a> 我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -p</span><br><span class="line"><span class="comment"># Answer y to all of the snippets you want to drop</span></span><br></pre></td></tr></table></figure><p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"><span class="comment"># Select all of the snippets you want to save</span></span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>或者, stash 你不需要的部分, 然后stash drop。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"><span class="comment"># Select all of the snippets you don't want to save</span></span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure><h2 id="分支branches"><a class="markdownIt-Anchor" href="#分支branches"></a> 分支(Branches)</h2><p><a name="pull-wrong-branch"></a></p><h3 id="我从错误的分支拉取了内容或把内容拉取到了错误的分支"><a class="markdownIt-Anchor" href="#我从错误的分支拉取了内容或把内容拉取到了错误的分支"></a> 我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward</span><br><span class="line">c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here</span><br></pre></td></tr></table></figure><p>重置分支到你所需的提交(desired commit):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard c5bc55a</span><br></pre></td></tr></table></figure><p>完成。</p><p><a href="discard-local-commits"></a></p><h3 id="我想扔掉本地的提交commit以便我的分支与远程的保持一致"><a class="markdownIt-Anchor" href="#我想扔掉本地的提交commit以便我的分支与远程的保持一致"></a> 我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line"><span class="comment"># On branch my-branch</span></span><br><span class="line"><span class="comment"># Your branch is ahead of 'origin/my-branch' by 2 commits.</span></span><br><span class="line"><span class="comment">#   (use "git push" to publish your local commits)</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>一种方法是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard origin/my-branch</span><br></pre></td></tr></table></figure><p><a name="commit-wrong-branch"></a></p><h3 id="我需要提交到一个新分支但错误的提交到了master"><a class="markdownIt-Anchor" href="#我需要提交到一个新分支但错误的提交到了master"></a> 我需要提交到一个新分支，但错误的提交到了master</h3><p>在master下创建一个新分支，不切换到新分支,仍在master下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git branch my-branch</span><br></pre></td></tr></table></figure><p>把master分支重置到前一个提交:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。 使用<code>git push</code> 同步内容到远程。</p><p>例如, master分支想重置到的提交的hash为<code>a13b85e</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure><p>签出(checkout)刚才新建的分支继续工作:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout my-branch</span><br></pre></td></tr></table></figure><p><a name="keep-whole-file"></a></p><h3 id="我想保留来自另外一个ref-ish的整个文件"><a class="markdownIt-Anchor" href="#我想保留来自另外一个ref-ish的整个文件"></a> 我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(solution)$ git add -A &amp;&amp; git commit -m <span class="string">"Adding all changes from this spike into one big commit."</span></span><br></pre></td></tr></table></figure><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(develop)$ git checkout solution -- file1.txt</span><br></pre></td></tr></table></figure><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># On branch develop</span></span><br><span class="line"><span class="comment"># Your branch is up-to-date with 'origin/develop'.</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#  (use "git reset HEAD &lt;file&gt;..." to unstage)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        modified:   file1.txt</span></span><br></pre></td></tr></table></figure><p>然后, 正常提交。</p><p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ <a href="https://en.wikipedia.org/wiki/Extreme_programming_practices" target="_blank" rel="noopener">Wikipedia</a>.</p><p><a name="cherry-pick"></a></p><h3 id="我把几个提交commit提交到了同一个分支而这些提交应该分布在不同的分支里"><a class="markdownIt-Anchor" href="#我把几个提交commit提交到了同一个分支而这些提交应该分布在不同的分支里"></a> 我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>master</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit e3851e817c451cc36f2e6f3049db528415e3c114</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:27 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug <span class="comment">#21 - Added CSRF protection</span></span><br><span class="line"></span><br><span class="line">commit 5ea51731d150f7ddc4a365437931cd8be3bf3131</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:12 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug <span class="comment">#14 - Fixed spacing on title</span></span><br><span class="line"></span><br><span class="line">commit a13b85e984171c6e2a1729bb061994525f626d14</span><br><span class="line">Author: Aki Rose &lt;akirose@example.com&gt;</span><br><span class="line">Date:   Tue Jul 21 01:12:48 2014 -0400</span><br><span class="line"></span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure><p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>master</code>分支重置到正确的提交(<code>a13b85e</code>):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure><p>现在, 我们对 bug #21 创建一个新的分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout -b 21</span><br><span class="line">(21)$</span><br></pre></td></tr></table></figure><p>接着, 我们用 <em>cherry-pick</em> 把对bug #21的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(21)$ git cherry-pick e3851e8</span><br></pre></td></tr></table></figure><p>这时候, 这里可能会产生冲突， 参见<a href="#interactive-rebase">交互式 rebasing 章</a> <a href="#merge-conflict"><strong>冲突节</strong></a> 解决冲突.</p><p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>master</code>分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(21)$ git checkout master</span><br><span class="line">(master)$ git checkout -b 14</span><br><span class="line">(14)$</span><br></pre></td></tr></table></figure><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(14)$ git cherry-pick 5ea5173</span><br></pre></td></tr></table></figure><p><a name="⌫-stale-local-branches"></a></p><h3 id="我想删除上游upstream分支被删除了的本地分支"><a class="markdownIt-Anchor" href="#我想删除上游upstream分支被删除了的本地分支"></a> 我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure><p><a name="restore-a-deleted-branch"></a></p><h3 id="我不小心删除了我的分支"><a class="markdownIt-Anchor" href="#我不小心删除了我的分支"></a> 我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout -b my-branch</span><br><span class="line">(my-branch)$ git branch</span><br><span class="line">(my-branch)$ touch foo.txt</span><br><span class="line">(my-branch)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>添加文件并做一次提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git add .</span><br><span class="line">(my-branch)$ git commit -m <span class="string">'foo.txt added'</span></span><br><span class="line">(my-branch)$ foo.txt added</span><br><span class="line"> 1 files changed, 1 insertions(+)</span><br><span class="line"> create mode 100644 foo.txt</span><br><span class="line">(my-branch)$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012</span><br><span class="line">Author: siemiatj &lt;siemiatj@example.com&gt;</span><br><span class="line">Date:   Wed Jul 30 00:34:10 2014 +0200</span><br><span class="line"></span><br><span class="line">    foo.txt added</span><br><span class="line"></span><br><span class="line">commit 69204cdf0acbab201619d95ad8295928e7f411d5</span><br><span class="line">Author: Kate Hudson &lt;katehudson@example.com&gt;</span><br><span class="line">Date:   Tue Jul 29 13:14:46 2014 -0400</span><br><span class="line"></span><br><span class="line">    Fixes <span class="comment">#6: Force pushing after amending commits</span></span><br></pre></td></tr></table></figure><p>现在我们切回到主(master)分支，‘不小心的’删除<code>my-branch</code>分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">(master)$ git branch -D my-branch</span><br><span class="line">Deleted branch my-branch (was 4e3cd85).</span><br><span class="line">(master)$ <span class="built_in">echo</span> oh noes, deleted my branch!</span><br><span class="line">oh noes, deleted my branch!</span><br></pre></td></tr></table></figure><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="literal">master</span>)$ git reflog</span><br><span class="line"><span class="number">69204</span>cd HEAD@&#123;<span class="number">0</span>&#125;: checkout: moving from my-branch to <span class="literal">master</span></span><br><span class="line"><span class="number">4</span>e3cd85 HEAD@&#123;<span class="number">1</span>&#125;: commit: foo.txt added</span><br><span class="line"><span class="number">69204</span>cd HEAD@&#123;<span class="number">2</span>&#125;: checkout: moving from <span class="keyword">master</span> <span class="title">to</span> my-branch</span><br></pre></td></tr></table></figure><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout -b my-branch-help</span><br><span class="line">Switched to a new branch <span class="string">'my-branch-help'</span></span><br><span class="line">(my-branch-help)$ git reset --hard 4e3cd85</span><br><span class="line">HEAD is now at 4e3cd85 foo.txt added</span><br><span class="line">(my-branch-help)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>看! 我们把删除的文件找回来了。 Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p><p><a name="i-want-to-⌫-a-branch"></a></p><h3 id="我想删除一个分支"><a class="markdownIt-Anchor" href="#我想删除一个分支"></a> 我想删除一个分支</h3><p>删除一个远程分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git push origin --⌫ my-branch</span><br></pre></td></tr></table></figure><p>你也可以:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git push origin :my-branch</span><br></pre></td></tr></table></figure><p>删除一个本地分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git branch -D my-branch</span><br></pre></td></tr></table></figure><p><a name="i-want-to-checkout-to-a-remote-branch-that-someone-else-is-working-on"></a></p><h3 id="我想从别人正在工作的远程分支签出checkout一个分支"><a class="markdownIt-Anchor" href="#我想从别人正在工作的远程分支签出checkout一个分支"></a> 我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git fetch --all</span><br></pre></td></tr></table></figure><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout --track origin/daves</span><br><span class="line">Branch daves <span class="built_in">set</span> up to track remote branch daves from origin.</span><br><span class="line">Switched to a new branch <span class="string">'daves'</span></span><br></pre></td></tr></table></figure><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h2 id="rebasing-和合并merging"><a class="markdownIt-Anchor" href="#rebasing-和合并merging"></a> Rebasing 和合并(Merging)</h2><p><a name="undo-rebase"></a></p><h3 id="我想撤销rebasemerge"><a class="markdownIt-Anchor" href="#我想撤销rebasemerge"></a> 我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。 Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure><p><a name="force-push-rebase"></a></p><h3 id="我已经rebase过-但是我不想强推force-push"><a class="markdownIt-Anchor" href="#我已经rebase过-但是我不想强推force-push"></a> 我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout my-branch</span><br><span class="line">(my-branch)$ git rebase -i master</span><br><span class="line">(my-branch)$ git checkout master</span><br><span class="line">(master)$ git merge --ff-only my-branch</span><br></pre></td></tr></table></figure><p>更多, 参见 <a href="http://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push" target="_blank" rel="noopener">this SO thread</a>.</p><p><a name="interactive-rebase"></a></p><h3 id="我需要组合combine几个提交commit"><a class="markdownIt-Anchor" href="#我需要组合combine几个提交commit"></a> 我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>master</code> 的pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 <em>所有</em> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(master)分支是最新的和你的变化都已经提交了, 然后:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git reset --soft master</span><br><span class="line">(my-branch)$ git commit -am <span class="string">"New awesome feature"</span></span><br></pre></td></tr></table></figure><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git rebase -i master</span><br></pre></td></tr></table></figure><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>在你执行了交互式 rebase的命令(interactive rebase ⌘)后, 你将在你的编辑器里看到类似下面的内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line">pick b729ad5 fixup</span><br><span class="line">pick e3851e8 another <span class="keyword">fix</span></span><br><span class="line"></span><br><span class="line"># Rebase <span class="number">8074</span>d12..b729ad5 onto <span class="number">8074</span>d12</span><br><span class="line">#</span><br><span class="line"># Command<span class="variable">s:</span></span><br><span class="line">#  <span class="keyword">p</span>, pick = use commit</span><br><span class="line">#  r, reword = use commit, but <span class="keyword">edit</span> the commit message</span><br><span class="line">#  <span class="keyword">e</span>, <span class="keyword">edit</span> = use commit, but <span class="keyword">stop</span> <span class="keyword">for</span> amending</span><br><span class="line">#  s, squash = use commit, but meld into <span class="keyword">previous</span> commit</span><br><span class="line">#  <span class="keyword">f</span>, fixup = like <span class="string">"squash"</span>, but discard this commit<span class="string">'s log message</span></span><br><span class="line"><span class="string">#  x, exec = run ⌘ (the rest of the line) using shell</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line"><span class="keyword">f</span> b729ad5 fixup</span><br><span class="line"><span class="keyword">f</span> e3851e8 another <span class="keyword">fix</span></span><br></pre></td></tr></table></figure><p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line">s b729ad5 fixup</span><br><span class="line">s e3851e8 another <span class="keyword">fix</span></span><br></pre></td></tr></table></figure><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Newer, awesomer features</span><br><span class="line"></span><br><span class="line"># Please ⏎ the commit message <span class="keyword">for</span> your <span class="keyword">changes</span>. Lines starting</span><br><span class="line"># with <span class="string">'#'</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts the commit.</span><br><span class="line"># rebase in progress; onto 8074d12</span><br><span class="line"># You are currently editing <span class="keyword">a</span> commit <span class="keyword">while</span> rebasing branch <span class="string">'master'</span> <span class="keyword">on</span> <span class="string">'8074d12'</span>.</span><br><span class="line">#</span><br><span class="line"># Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</span><br><span class="line">#modified:   README.md</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>如果成功了, 你应该看到类似下面的内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure><h4 id="安全合并merging策略"><a class="markdownIt-Anchor" href="#安全合并merging策略"></a> 安全合并(merging)策略</h4><p><code>--𐄂-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 <code>𐄂-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git merge --𐄂-ff --𐄂-commit my-branch</span><br></pre></td></tr></table></figure><h4 id="我需要将一个分支合并成一个提交commit"><a class="markdownIt-Anchor" href="#我需要将一个分支合并成一个提交commit"></a> 我需要将一个分支合并成一个提交(commit)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git merge --squash my-branch</span><br></pre></td></tr></table></figure><p><a name="rebase-unpushed-commits"></a></p><h4 id="我只想组合combine未推的提交unpushed-commit"><a class="markdownIt-Anchor" href="#我只想组合combine未推的提交unpushed-commit"></a> 我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git rebase -i @&#123;u&#125;</span><br></pre></td></tr></table></figure><p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p><p><a name="✓-if-all-commits-on-a-branch-are-merged"></a></p><h3 id="检查是否分支上的所有提交commit都合并merge过了"><a class="markdownIt-Anchor" href="#检查是否分支上的所有提交commit都合并merge过了"></a> 检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span> --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll</span><br></pre></td></tr></table></figure><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span> master ^feature/120-on-scroll --𐄂-merges</span><br></pre></td></tr></table></figure><h3 id="交互式rebaseinteractive-rebase可能出现的问题"><a class="markdownIt-Anchor" href="#交互式rebaseinteractive-rebase可能出现的问题"></a> 交互式rebase(interactive rebase)可能出现的问题</h3><p><a name="noop"></a></p><h4 id="这个rebase-编辑屏幕出现noop"><a class="markdownIt-Anchor" href="#这个rebase-编辑屏幕出现noop"></a> 这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">noop</span></span><br></pre></td></tr></table></figure><p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。 你可以尝试:</p><ul><li>检查确保主(master)分支没有问题</li><li>rebase  <code>HEAD~2</code> 或者更早</li></ul><p><a name="merge-conflict"></a></p><h4 id="有冲突的情况"><a class="markdownIt-Anchor" href="#有冲突的情况"></a> 有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line">On branch my-branch</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   README.md</span><br></pre></td></tr></table></figure><p>在这个例子里面, <code>README.md</code> 有冲突。 打开这个文件找到类似下面的内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">some code</span><br><span class="line">=========</span><br><span class="line">some code</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="keyword">new</span>-commit</span><br></pre></td></tr></table></figure><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master*)$ git mergetool -t opendiff</span><br></pre></td></tr></table></figure><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git add README.md</span><br><span class="line">(my-branch)$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git rebase --abort</span><br></pre></td></tr></table></figure><p><a name="miscellaneous-objects"></a></p><h2 id="杂项miscellaneous-objects"><a class="markdownIt-Anchor" href="#杂项miscellaneous-objects"></a> 杂项(Miscellaneous Objects)</h2><p><a name="clone-submodules"></a></p><h3 id="克隆所有子模块"><a class="markdownIt-Anchor" href="#克隆所有子模块"></a> 克隆所有子模块</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive git://github.com/foo/bar.git</span><br></pre></td></tr></table></figure><p>如果已经克隆了:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p><a name="⌫-tag"></a></p><h3 id="删除标签tag"><a class="markdownIt-Anchor" href="#删除标签tag"></a> 删除标签(tag)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tag_name&gt;</span><br><span class="line">$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure><p><a name="recover-tag"></a></p><h3 id="恢复已删除标签tag"><a class="markdownIt-Anchor" href="#恢复已删除标签tag"></a> 恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fsck --unreachable | grep tag</span><br></pre></td></tr></table></figure><p>记下这个标签(tag)的hash，然后用Git的 <a href="http://git-scm.com/docs/git-update-ref" target="_blank" rel="noopener">update-ref</a>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-ref refs/tags/&lt;tag_name&gt; &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p>这时你的标签(tag)应该已经恢复了。</p><p><a name="deleted-patch"></a></p><h3 id="已删除补丁patch"><a class="markdownIt-Anchor" href="#已删除补丁patch"></a> 已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见<a href="#commit-wrong-author">变更作者</a>。 然后, 应用变化, 再发起一个新的pull request。</p><h2 id="跟踪文件tracking-files"><a class="markdownIt-Anchor" href="#跟踪文件tracking-files"></a> 跟踪文件(Tracking Files)</h2><p><a href="i-want-to-change-a-file-names-capitalization-without-changing-the-contents-of-the-file"></a></p><h3 id="我只想改变一个文件名字的大小写而不修改内容"><a class="markdownIt-Anchor" href="#我只想改变一个文件名字的大小写而不修改内容"></a> 我只想改变一个文件名字的大小写，而不修改内容</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git mv --force myfile MyFile</span><br></pre></td></tr></table></figure><p><a href="remove-from-git"></a></p><h3 id="我想从git删除一个文件但保留该文件"><a class="markdownIt-Anchor" href="#我想从git删除一个文件但保留该文件"></a> 我想从Git删除一个文件，但保留该文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git rm --cached log.txt</span><br></pre></td></tr></table></figure><h2 id="配置configuration"><a class="markdownIt-Anchor" href="#配置configuration"></a> 配置(Configuration)</h2><p><a name="adding-⌘-aliases"></a></p><h3 id="我想给一些git命令添加别名alias"><a class="markdownIt-Anchor" href="#我想给一些git命令添加别名alias"></a> 我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <figure class="highlight plain"><figcaption><span>部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```vim</span><br><span class="line">[alias]</span><br><span class="line">    a = add</span><br><span class="line">    amend = commit --amend</span><br><span class="line">    c = commit</span><br><span class="line">    ca = commit --amend</span><br><span class="line">    ci = commit -a</span><br><span class="line">    co = checkout</span><br><span class="line">    d = diff</span><br><span class="line">    dc = diff --changed</span><br><span class="line">    ds = diff --staged</span><br><span class="line">    f = fetch</span><br><span class="line">    loll = log --graph --decorate --pretty=oneline --abbrev-commit</span><br><span class="line">    m = merge</span><br><span class="line">    one = log --pretty=oneline</span><br><span class="line">    outstanding = rebase -i @&#123;u&#125;</span><br><span class="line">    s = status</span><br><span class="line">    unpushed = log @&#123;u&#125;</span><br><span class="line">    wc = whatchanged</span><br><span class="line">    wip = rebase -i @&#123;u&#125;</span><br><span class="line">    zap = fetch -p</span><br></pre></td></tr></table></figure></p><p><a name="credential-helper"></a></p><h3 id="我想缓存一个仓库repository的用户名和密码"><a class="markdownIt-Anchor" href="#我想缓存一个仓库repository的用户名和密码"></a> 我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global credential.helper cache</span><br><span class="line"><span class="comment"># Set git to use the credential memory cache</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=3600'</span></span><br><span class="line"><span class="comment"># Set the cache to timeout after 1 hour (setting is in seconds)</span></span><br></pre></td></tr></table></figure><p><a href="#ive-𐄂-idea-what-i-did-wrong"></a></p><h2 id="我不知道我做错了些什么"><a class="markdownIt-Anchor" href="#我不知道我做错了些什么"></a> 我不知道我做错了些什么</h2><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class="line">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master</span><br><span class="line">c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2</span><br></pre></td></tr></table></figure><p>上面的reflog展示了从master分支签出(checkout)到2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@{0}</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前master上指向的提交(0254ea7)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 0254ea7</span><br></pre></td></tr></table></figure><p>然后使用git reset就可以把master改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p><p>(<a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog" target="_blank" rel="noopener">摘自</a>).</p><h1 id="其它资源other-resources"><a class="markdownIt-Anchor" href="#其它资源other-resources"></a> 其它资源(Other Resources)</h1><h2 id="书books"><a class="markdownIt-Anchor" href="#书books"></a> 书(Books)</h2><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Pro Git</a> - Scott Chacon’s excellent git book</li><li><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="noopener">Git Internals</a> - Scott Chacon’s other excellent git book</li></ul><h2 id="教程tutorials"><a class="markdownIt-Anchor" href="#教程tutorials"></a> 教程(Tutorials)</h2><ul><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git branching</a> 一个基于网页的交互式 branching/merging/rebasing 教程</li><li><a href="https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa" target="_blank" rel="noopener">Getting solid at Git rebase vs. merge</a></li><li><a href="https://github.com/asmeurer/git-workflow" target="_blank" rel="noopener">git-workflow</a> - <a href="https://github.com/asmeurer" target="_blank" rel="noopener">Aaron Meurer</a>的怎么使用Git为开源仓库贡献</li><li><a href="http://hugogiraudel.com/2015/08/13/github-as-a-workflow/" target="_blank" rel="noopener">GitHub as a workflow</a> - 使用GitHub做为工作流的趣事, 尤其是空PRs</li></ul><h2 id="脚本和工具scripts-and-tools"><a class="markdownIt-Anchor" href="#脚本和工具scripts-and-tools"></a> 脚本和工具(Scripts and Tools)</h2><ul><li><a href="http://firstaidgit.io/" target="_blank" rel="noopener">firstaidgit.io</a> 一个可搜索的最常被问到的Git的问题</li><li><a href="https://github.com/unixorn/git-extra-commands" target="_blank" rel="noopener">git-extra-commands</a> - 一堆有用的额外的Git脚本</li><li><a href="https://github.com/tj/git-extras" target="_blank" rel="noopener">git-extras</a> - GIT 工具集 – repo summary, repl, changelog population, author commit percentages and more</li><li><a href="https://github.com/qw3rtman/git-fire" target="_blank" rel="noopener">git-fire</a> - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。</li><li><a href="https://github.com/git-tips/tips" target="_blank" rel="noopener">git-tips</a> - Git小提示</li><li><a href="https://github.com/Originate/git-town" target="_blank" rel="noopener">git-town</a> - 通用，高级Git工作流支持！ <a href="http://www.git-town.com" target="_blank" rel="noopener">http://www.git-town.com</a></li></ul><h2 id="gui客户端gui-clients"><a class="markdownIt-Anchor" href="#gui客户端gui-clients"></a> GUI客户端(GUI Clients)</h2><ul><li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a> - 豪华的Git客户端 Windows, Mac &amp; Linux</li><li><a href="https://git-cola.github.io/" target="_blank" rel="noopener">git-cola</a> - 另外一个Git客户端 Windows &amp; OS X</li><li><a href="https://github.com/git-up/GitUp" target="_blank" rel="noopener">GitUp</a> - 一个新的Git客户端，在处理Git的复杂性上有自己的特点</li><li><a href="https://rowanj.github.io/gitx/" target="_blank" rel="noopener">gitx-dev</a> - 图形化的Git客户端 OS X</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Source Tree</a> - 免费的图形化Git客户端 Windows &amp; OS X</li><li><a href="http://www.git-tower.com/" target="_blank" rel="noopener">Tower</a> - 图形化Git客户端 OS X(付费)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文是 &lt;a href=&quot;https://github.com/k88hudson/git-flight-rules&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flight rules for Git&lt;/a&gt; 的中文版，&lt;a href=&quot;https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击这里&lt;/a&gt; 到达原文。&lt;/p&gt;&lt;/div&gt;
&lt;h1 id=&quot;git-飞行规则-flight-rules&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git-飞行规则-flight-rules&quot;&gt;&lt;/a&gt; Git 飞行规则 (Flight Rules)&lt;/h1&gt;
&lt;h2 id=&quot;什么是飞行规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是飞行规则&quot;&gt;&lt;/a&gt; 什么是&amp;quot;飞行规则&amp;quot;?&lt;/h2&gt;
&lt;p&gt;一个 &lt;a href=&quot;http://www.jsc.nasa.gov/news/columbia/fr_generic.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宇航员指南&lt;/a&gt; (现在, 程序员们都在使用GIT) 是关于出现问题过后应该怎么操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;飞行规则(Flight Rules)&lt;/em&gt; 是记录在手册上的来之不易的一系列知识，记录了某个事情发生的原因，以及怎样一步一步的进行处理。本质上, 它们是特定场景的非常详细的标准处理流程。 […]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;自20世纪60年代初以来，NASA一直在捕捉(capturing)我们的失误，灾难和解决方案, 当时水星时代(Mercury-era)的地面小组首先开始将“经验教训”收集到一个纲要(compendium)中，该纲现在已经有上千个问题情景，从发动机故障到破损的舱口把手到计算机故障，以及它们对应的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;cite&gt;Chris Hadfield&lt;/cite&gt;, &lt;em&gt;一个宇航员的生活指南(An Astronaut’s Guide to Life)&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://alt.trai25.me/categories/Coding/"/>
    
    
      <category term="Git" scheme="https://alt.trai25.me/tags/Git/"/>
    
      <category term="guide" scheme="https://alt.trai25.me/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>The styles of NexT theme</title>
    <link href="https://alt.trai25.me/2018/03/30/next-theme-styles/"/>
    <id>https://alt.trai25.me/2018/03/30/next-theme-styles/</id>
    <published>2018-03-30T06:25:18.000Z</published>
    <updated>2018-04-11T16:06:28.224Z</updated>
    
    <content type="html"><![CDATA[<p>测试一下 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> + <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 的样式</p><a id="more"></a><h1 id="header-1"><a class="markdownIt-Anchor" href="#header-1"></a> Header 1</h1><h2 id="header-2"><a class="markdownIt-Anchor" href="#header-2"></a> Header 2</h2><h3 id="header-3"><a class="markdownIt-Anchor" href="#header-3"></a> Header 3</h3><h4 id="header-4"><a class="markdownIt-Anchor" href="#header-4"></a> Header 4</h4><hr><p><a href="https://blog.trai25.me" target="_blank" rel="noopener">Link</a></p><hr><ul><li>List Item</li><li>List Item</li><li>List Item</li></ul><ol><li>List Item</li><li>List Item</li><li>List Item</li></ol><hr><table><thead><tr><th>标题栏</th><th>标题栏</th><th style="text-align:left">标题栏</th></tr></thead><tbody><tr><td>内容</td><td>内容</td><td style="text-align:left">内容</td></tr><tr><td>内容</td><td>内容</td><td style="text-align:left">内容</td></tr><tr><td>内容</td><td>内容</td><td style="text-align:left">内容</td></tr></tbody></table><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>blah blah blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>May the Force be with you</p></blockquote><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class="full-image" 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/image-url"</span> <span class="attr">class</span>=<span class="string">"full-image"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></span><br><span class="line">&#123;% fullimage /image-url, alt, title %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line">&#123;% fi /image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/nathan-anderson-316188-unsplash.jpg" class="full-image" alt="Full Image" title="fi"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><hr><p><img src="/uploads/nathan-anderson-316188-unsplash.jpg" alt="Normal Image"></p><hr><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>class_name</code> 可以是一下列表中的一个值：</p><ul><li><code>default</code></li><li><code>primary</code></li><li><code>success</code></li><li><code>info</code></li><li><code>warning</code></li><li><code>danger</code></li></ul><div class="note default"><p>May the <strong>Force</strong> be with you</p></div><div class="note primary"><p>May the <strong>Force</strong> be with you</p></div><div class="note cuccess"><p>May the <strong>Force</strong> be with you</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试一下 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; + &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NexT&lt;/a&gt; 的样式&lt;/p&gt;
    
    </summary>
    
    
      <category term="style" scheme="https://alt.trai25.me/tags/style/"/>
    
      <category term="testing" scheme="https://alt.trai25.me/tags/testing/"/>
    
      <category term="hexo" scheme="https://alt.trai25.me/tags/hexo/"/>
    
      <category term="NexT-theme" scheme="https://alt.trai25.me/tags/NexT-theme/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://alt.trai25.me/2018/03/29/hello-world/"/>
    <id>https://alt.trai25.me/2018/03/29/hello-world/</id>
    <published>2018-03-28T18:16:11.897Z</published>
    <updated>2018-03-30T06:02:01.517Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
